//package com.market.bc.contract;
//
//import java.math.BigInteger;
//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.Collections;
//import java.util.List;
//import org.fisco.bcos.sdk.abi.FunctionEncoder;
//import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
//import org.fisco.bcos.sdk.abi.TypeReference;
//import org.fisco.bcos.sdk.abi.datatypes.Address;
//import org.fisco.bcos.sdk.abi.datatypes.Bool;
//import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
//import org.fisco.bcos.sdk.abi.datatypes.Event;
//import org.fisco.bcos.sdk.abi.datatypes.Function;
//import org.fisco.bcos.sdk.abi.datatypes.Type;
//import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
//import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
//import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
//import org.fisco.bcos.sdk.client.Client;
//import org.fisco.bcos.sdk.contract.Contract;
//import org.fisco.bcos.sdk.crypto.CryptoSuite;
//import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
//import org.fisco.bcos.sdk.eventsub.EventCallback;
//import org.fisco.bcos.sdk.model.CryptoType;
//import org.fisco.bcos.sdk.model.TransactionReceipt;
//import org.fisco.bcos.sdk.model.callback.TransactionCallback;
//import org.fisco.bcos.sdk.transaction.model.exception.ContractException;
//
//@SuppressWarnings("unchecked")
//public class MynftOld extends Contract {
//    public static final String[] BINARY_ARRAY = {"","91040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a7b565b005b348015610dd757600080fd5b50610e2c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b59565b604051808215151515815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060068054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f6f5780601f10610f4457610100808354040283529160200191610f6f565b820191906000526020600020905b815481529060010190602001808311610f5257829003601f168201915b5050505050905090565b6000610f8482611bed565b1515610f8f57600080fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610fd58261125b565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561101257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061105257506110518133611b59565b5b151561105d57600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b61111a848484611148565b8060096000848152602001908152602001600020908051906020019061114192919061249b565b5050505050565b6111523382611c5f565b151561115d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561119957600080fd5b6111a38382611cf4565b6111ad8382611df7565b6111b78282611f26565b808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6112348484846020604051908101604052806000815250856112d9565b50505050565b61125683838360206040519081016040528060008152506117e5565b505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112d057600080fd5b80915050919050565b6112e4858585611148565b8060096000858152602001908152602001600020908051906020019061130b92919061249b565b5061131885858585612080565b151561132357600080fd5b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561136757600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600960008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114575780601f1061142c57610100808354040283529160200191611457565b820191906000526020600020905b81548152906001019060200180831161143a57829003601f168201915b50505050509050919050565b61146c85611bed565b15151561147857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156114b457600080fd5b6114be84866122a2565b806009600087815260200190815260200160002090805190602001906114e592919061249b565b506114f1858484612348565b848473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0a379200ca4d32ac7f1351005f51ef6d49dae15616e15e868f304fc5469e6d0a846040518080602001828103825283818151815260200191508051906020019080838360005b83811015611582578082015181840152602081019050611567565b50505050905090810190601f1680156115af5780820380516001836020036101000a031916815260200191505b509250505060405180910390a45050505050565b606060078054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561165b5780601f106116305761010080835404028352916020019161165b565b820191906000526020600020905b81548152906001019060200180831161163e57829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156116a057600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6117ab3383611c5f565b15156117b657600080fd5b806008600084815260200190815260200160002060010190805190602001906117e092919061249b565b505050565b6117f0848484611148565b6117fc84848484612080565b151561180757600080fd5b50505050565b806006908051906020019061182392919061249b565b5050565b60608061183383611bed565b15156118cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4552433732314d657461646174613a2055524920717565727920666f72206e6f81526020017f6e6578697374656e7420746f6b656e000000000000000000000000000000000081525060400191505060405180910390fd5b6008600084815260200190815260200160002060000160086000858152602001908152602001600020600101818054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561198e5780601f106119635761010080835404028352916020019161198e565b820191906000526020600020905b81548152906001019060200180831161197157829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a2a5780601f106119ff57610100808354040283529160200191611a2a565b820191906000526020600020905b815481529060010190602001808311611a0d57829003601f168201915b5050505050905091509150915091565b611a443383611c5f565b1515611a4f57600080fd5b80600960008481526020019081526020016000209080519060200190611a7692919061249b565b505050565b611a8484611bed565b151515611a9057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515611acc57600080fd5b611ad683856122a2565b611ae1848383612348565b838373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0a379200ca4d32ac7f1351005f51ef6d49dae15616e15e868f304fc5469e6d0a604051808060200182810382526000815260200160200191505060405180910390a450505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600080611c6b8361125b565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611cda57508373ffffffffffffffffffffffffffffffffffffffff16611cc284610f79565b73ffffffffffffffffffffffffffffffffffffffff16145b80611ceb5750611cea8185611b59565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16611d148261125b565b73ffffffffffffffffffffffffffffffffffffffff16141515611d3657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff","166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611df35760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b8173ffffffffffffffffffffffffffffffffffffffff16611e178261125b565b73ffffffffffffffffffffffffffffffffffffffff16141515611e3957600080fd5b611e8c6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461244690919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611f9457600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506120396001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461246790919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000806120a28573ffffffffffffffffffffffffffffffffffffffff16612488565b15156120b15760019150612299565b8473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121a657808201518184015260208101905061218b565b50505050905090810190601f1680156121d35780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156121f557600080fd5b505af1158015612209573d6000803e3d6000fd5b505050506040513d602081101561221f57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156122de57600080fd5b6122e88282611f26565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b61235183611bed565b15156123eb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4552433732314d657461646174613a2055524920736574206f66206e6f6e657881526020017f697374656e7420746f6b656e000000000000000000000000000000000000000081525060400191505060405180910390fd5b8160086000858152602001908152602001600020600001908051906020019061241592919061249b565b508060086000858152602001908152602001600020600101908051906020019061244092919061249b565b50505050565b60008083831115151561245857600080fd5b82840390508091505092915050565b600080828401905083811015151561247e57600080fd5b8091505092915050565b600080823b905060008111915050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124dc57805160ff191683800117855561250a565b8280016001018555821561250a579182015b828111156125095782518255916020019190600101906124ee565b5b509050612517919061251b565b5090565b61253d91905b80821115612539576000816000905550600101612521565b5090565b905600a165627a7a7230582059b90848860821d0604f737f7c77557362ba1638fcd5e548a02cabbf88fa01170029"};
//
//    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);
//
//    public static final String[] SM_BINARY_ARRAY = {"","","828103825283818151815260200191508051906020019080838360005b83811015611d85578082015181840152602081019050611d6a565b50505050905090810190601f168015611db25780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611dd457600080fd5b505af1158015611de8573d6000803e3d6000fd5b505050506040513d6020811015611dfe57600080fd5b8101908080519060200190929190505050905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b600080611e8d8361164c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611efc57508373ffffffffffffffffffffffffffffffffffffffff16611ee48461191f565b73ffffffffffffffffffffffffffffffffffffffff16145b80611f0d5750611f0c818561146e565b5b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611f5257600080fd5b611f5c82826122ec565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f18f84334255a242551aa98c68047b5da8063eab9fbeaec1eddeea280044b9ff160405160405180910390a45050565b611fc583611bed565b151561205f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f4552433732314d657461646174613a2055524920736574206f66206e6f6e657881526020017f697374656e7420746f6b656e000000000000000000000000000000000000000081525060400191505060405180910390fd5b8160086000858152602001908152602001600020600001908051906020019061208992919061249b565b50806008600085815260200190815260200160002060010190805190602001906120b492919061249b565b50505050565b8173ffffffffffffffffffffffffffffffffffffffff166120da8261164c565b73ffffffffffffffffffffffffffffffffffffffff161415156120fc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156121b95760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b8173ffffffffffffffffffffffffffffffffffffffff166121dd8261164c565b73ffffffffffffffffffffffffffffffffffffffff161415156121ff57600080fd5b6122526001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461245990919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561235a57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506123ff6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461247a90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600080823b905060008111915050919050565b60008083831115151561246b57600080fd5b82840390508091505092915050565b600080828401905083811015151561249157600080fd5b8091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124dc57805160ff191683800117855561250a565b8280016001018555821561250a579182015b828111156125095782518255916020019190600101906124ee565b5b509050612517919061251b565b5090565b61253d91905b80821115612539576000816000905550600101612521565b5090565b905600a165627a7a72305820709d05571d96ccbdae6cd494afe9d5175d9df7d571a3e0004e36ba03ac5302e60029"};
//
//    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);
//
//    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"},{\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"publicKey\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"files\",\"type\":\"string\"},{\"name\":\"auth\",\"type\":\"string\"},{\"name\":\"pubkey\",\"type\":\"string\"}],\"name\":\"mintWithPubkey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"auth\",\"type\":\"string\"}],\"name\":\"setTokenURIAuth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"setPublicKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"files\",\"type\":\"string\"},{\"name\":\"auth\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"miner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"pubKey\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}]"};
//
//    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);
//
//    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";
//
//    public static final String FUNC_CREATOR = "creator";
//
//    public static final String FUNC_NAME = "name";
//
//    public static final String FUNC_GETAPPROVED = "getApproved";
//
//    public static final String FUNC_APPROVE = "approve";
//
//    public static final String FUNC_TRANSFERFROM = "transferFrom";
//
//    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";
//
//    public static final String FUNC_OWNEROF = "ownerOf";
//
//    public static final String FUNC_BALANCEOF = "balanceOf";
//
//    public static final String FUNC_PUBLICKEY = "publicKey";
//
//    public static final String FUNC_MINTWITHPUBKEY = "mintWithPubkey";
//
//    public static final String FUNC_SYMBOL = "symbol";
//
//    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";
//
//    public static final String FUNC_SETTOKENURIAUTH = "setTokenURIAuth";
//
//    public static final String FUNC_SETNAME = "setName";
//
//    public static final String FUNC_TOKENURI = "tokenURI";
//
//    public static final String FUNC_SETPUBLICKEY = "setPublicKey";
//
//    public static final String FUNC_MINT = "mint";
//
//    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";
//
//    public static final Event MINT_EVENT = new Event("Mint",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Utf8String>() {}));
//    ;
//
//    public static final Event TRANSFER_EVENT = new Event("Transfer",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
//    ;
//
//    public static final Event APPROVAL_EVENT = new Event("Approval",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
//    ;
//
//    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
//            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
//    ;
//
//    protected MynftOld(String contractAddress, Client client, CryptoKeyPair credential) {
//        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
//    }
//
//    public static String getBinary(CryptoSuite cryptoSuite) {
//        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
//    }
//
//    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
//        final Function function = new Function(FUNC_SUPPORTSINTERFACE,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
//        return executeCallWithSingleValueReturn(function, Boolean.class);
//    }
//
//    public String creator() throws ContractException {
//        final Function function = new Function(FUNC_CREATOR,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public String name() throws ContractException {
//        final Function function = new Function(FUNC_NAME,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public String getApproved(BigInteger tokenId) throws ContractException {
//        final Function function = new Function(FUNC_GETAPPROVED,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public TransactionReceipt approve(String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_APPROVE,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] approve(String to, BigInteger tokenId, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_APPROVE,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForApprove(String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_APPROVE,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<String, BigInteger> getApproveInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_APPROVE,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (BigInteger) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt transferFrom(String from, String to, BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] transferFrom(String from, String to, BigInteger tokenId, String pubKey, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForTransferFrom(String from, String to, BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple4<String, String, BigInteger, String> getTransferFromAddressAddressUint256StringInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple4<String, String, BigInteger, String>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue(),
//                (String) results.get(3).getValue()
//                );
//    }
//
//    public TransactionReceipt transferFrom(String from, String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] transferFrom(String from, String to, BigInteger tokenId, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForTransferFrom(String from, String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple3<String, String, BigInteger> getTransferFromAddressAddressUint256Input(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_TRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple3<String, String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue()
//                );
//    }
//
//    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] safeTransferFrom(String from, String to, BigInteger tokenId, String pubKey, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple4<String, String, BigInteger, String> getSafeTransferFromAddressAddressUint256StringInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple4<String, String, BigInteger, String>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue(),
//                (String) results.get(3).getValue()
//                );
//    }
//
//    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] safeTransferFrom(String from, String to, BigInteger tokenId, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger tokenId) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple3<String, String, BigInteger> getSafeTransferFromAddressAddressUint256Input(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple3<String, String, BigInteger>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue()
//                );
//    }
//
//    public String ownerOf(BigInteger tokenId) throws ContractException {
//        final Function function = new Function(FUNC_OWNEROF,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data, String pubKey) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data, String pubKey, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data, String pubKey) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple5<String, String, BigInteger, byte[], String> getSafeTransferFromAddressAddressUint256BytesStringInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple5<String, String, BigInteger, byte[], String>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue(),
//                (byte[]) results.get(3).getValue(),
//                (String) results.get(4).getValue()
//                );
//    }
//
//    public BigInteger balanceOf(String owner) throws ContractException {
//        final Function function = new Function(FUNC_BALANCEOF,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
//        return executeCallWithSingleValueReturn(function, BigInteger.class);
//    }
//
//    public String publicKey(BigInteger tokenId) throws ContractException {
//        final Function function = new Function(FUNC_PUBLICKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public TransactionReceipt mintWithPubkey(BigInteger tokenId, String to, String files, String auth, String pubkey) {
//        final Function function = new Function(
//                FUNC_MINTWITHPUBKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubkey)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] mintWithPubkey(BigInteger tokenId, String to, String files, String auth, String pubkey, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_MINTWITHPUBKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubkey)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForMintWithPubkey(BigInteger tokenId, String to, String files, String auth, String pubkey) {
//        final Function function = new Function(
//                FUNC_MINTWITHPUBKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubkey)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple5<BigInteger, String, String, String, String> getMintWithPubkeyInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_MINTWITHPUBKEY,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple5<BigInteger, String, String, String, String>(
//
//                (BigInteger) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue(),
//                (String) results.get(3).getValue(),
//                (String) results.get(4).getValue()
//                );
//    }
//
//    public String symbol() throws ContractException {
//        final Function function = new Function(FUNC_SYMBOL,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        return executeCallWithSingleValueReturn(function, String.class);
//    }
//
//    public TransactionReceipt setApprovalForAll(String to, Boolean approved) {
//        final Function function = new Function(
//                FUNC_SETAPPROVALFORALL,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] setApprovalForAll(String to, Boolean approved, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SETAPPROVALFORALL,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSetApprovalForAll(String to, Boolean approved) {
//        final Function function = new Function(
//                FUNC_SETAPPROVALFORALL,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Bool(approved)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SETAPPROVALFORALL,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<String, Boolean>(
//
//                (String) results.get(0).getValue(),
//                (Boolean) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt setTokenURIAuth(BigInteger tokenId, String auth) {
//        final Function function = new Function(
//                FUNC_SETTOKENURIAUTH,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] setTokenURIAuth(BigInteger tokenId, String auth, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SETTOKENURIAUTH,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSetTokenURIAuth(BigInteger tokenId, String auth) {
//        final Function function = new Function(
//                FUNC_SETTOKENURIAUTH,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<BigInteger, String> getSetTokenURIAuthInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SETTOKENURIAUTH,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<BigInteger, String>(
//
//                (BigInteger) results.get(0).getValue(),
//                (String) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
//        final Function function = new Function(
//                FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(from),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(_data)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple4<String, String, BigInteger, byte[]> getSafeTransferFromAddressAddressUint256BytesInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SAFETRANSFERFROM,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple4<String, String, BigInteger, byte[]>(
//
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (BigInteger) results.get(2).getValue(),
//                (byte[]) results.get(3).getValue()
//                );
//    }
//
//    public TransactionReceipt setName(String newName) {
//        final Function function = new Function(
//                FUNC_SETNAME,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newName)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] setName(String newName, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SETNAME,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newName)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSetName(String newName) {
//        final Function function = new Function(
//                FUNC_SETNAME,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(newName)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple1<String> getSetNameInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SETNAME,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple1<String>(
//
//                (String) results.get(0).getValue()
//                );
//    }
//
//    public Tuple2<String, String> tokenURI(BigInteger tokenId) throws ContractException {
//        final Function function = new Function(FUNC_TOKENURI,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = executeCallWithMultipleValueReturn(function);
//        return new Tuple2<String, String>(
//                (String) results.get(0).getValue(),
//                (String) results.get(1).getValue());
//    }
//
//    public TransactionReceipt setPublicKey(BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_SETPUBLICKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] setPublicKey(BigInteger tokenId, String pubKey, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_SETPUBLICKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForSetPublicKey(BigInteger tokenId, String pubKey) {
//        final Function function = new Function(
//                FUNC_SETPUBLICKEY,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(pubKey)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple2<BigInteger, String> getSetPublicKeyInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_SETPUBLICKEY,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple2<BigInteger, String>(
//
//                (BigInteger) results.get(0).getValue(),
//                (String) results.get(1).getValue()
//                );
//    }
//
//    public TransactionReceipt mint(BigInteger tokenId, String to, String files, String auth) {
//        final Function function = new Function(
//                FUNC_MINT,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return executeTransaction(function);
//    }
//
//    public byte[] mint(BigInteger tokenId, String to, String files, String auth, TransactionCallback callback) {
//        final Function function = new Function(
//                FUNC_MINT,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return asyncExecuteTransaction(function, callback);
//    }
//
//    public String getSignedTransactionForMint(BigInteger tokenId, String to, String files, String auth) {
//        final Function function = new Function(
//                FUNC_MINT,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(tokenId),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(to),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(files),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(auth)),
//                Collections.<TypeReference<?>>emptyList());
//        return createSignedTransaction(function);
//    }
//
//    public Tuple4<BigInteger, String, String, String> getMintInput(TransactionReceipt transactionReceipt) {
//        String data = transactionReceipt.getInput().substring(10);
//        final Function function = new Function(FUNC_MINT,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
//        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
//        return new Tuple4<BigInteger, String, String, String>(
//
//                (BigInteger) results.get(0).getValue(),
//                (String) results.get(1).getValue(),
//                (String) results.get(2).getValue(),
//                (String) results.get(3).getValue()
//                );
//    }
//
//    public Boolean isApprovedForAll(String owner, String operator) throws ContractException {
//        final Function function = new Function(FUNC_ISAPPROVEDFORALL,
//                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(owner),
//                new org.fisco.bcos.sdk.abi.datatypes.Address(operator)),
//                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
//        return executeCallWithSingleValueReturn(function, Boolean.class);
//    }
//
//    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
//        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            MintEventResponse typedResponse = new MintEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.miner = (String) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
//            typedResponse.pubKey = (String) eventValues.getNonIndexedValues().get(0).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }
//
//    public void subscribeMintEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
//        String topic0 = eventEncoder.encode(MINT_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
//    }
//
//    public void subscribeMintEvent(EventCallback callback) {
//        String topic0 = eventEncoder.encode(MINT_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,callback);
//    }
//
//    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
//        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            TransferEventResponse typedResponse = new TransferEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }
//
//    public void subscribeTransferEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
//        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
//    }
//
//    public void subscribeTransferEvent(EventCallback callback) {
//        String topic0 = eventEncoder.encode(TRANSFER_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,callback);
//    }
//
//    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
//        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
//            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }
//
//    public void subscribeApprovalEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
//        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
//    }
//
//    public void subscribeApprovalEvent(EventCallback callback) {
//        String topic0 = eventEncoder.encode(APPROVAL_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,callback);
//    }
//
//    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
//        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
//        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
//        for (Contract.EventValuesWithLog eventValues : valueList) {
//            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
//            typedResponse.log = eventValues.getLog();
//            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
//            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
//            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
//            responses.add(typedResponse);
//        }
//        return responses;
//    }
//
//    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
//        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
//    }
//
//    public void subscribeApprovalForAllEvent(EventCallback callback) {
//        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
//        subscribeEvent(ABI,BINARY,topic0,callback);
//    }
//
//    public static MynftOld load(String contractAddress, Client client, CryptoKeyPair credential) {
//        return new MynftOld(contractAddress, client, credential);
//    }
//
//    public static MynftOld deploy(Client client, CryptoKeyPair credential, String name, String symbol) throws ContractException {
//        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name),
//                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(symbol)));
//        return deploy(MynftOld.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
//    }
//
//    public static class MintEventResponse {
//        public TransactionReceipt.Logs log;
//
//        public String miner;
//
//        public String to;
//
//        public BigInteger tokenId;
//
//        public String pubKey;
//    }
//
//    public static class TransferEventResponse {
//        public TransactionReceipt.Logs log;
//
//        public String from;
//
//        public String to;
//
//        public BigInteger tokenId;
//    }
//
//    public static class ApprovalEventResponse {
//        public TransactionReceipt.Logs log;
//
//        public String owner;
//
//        public String approved;
//
//        public BigInteger tokenId;
//    }
//
//    public static class ApprovalForAllEventResponse {
//        public TransactionReceipt.Logs log;
//
//        public String owner;
//
//        public String operator;
//
//        public Boolean approved;
//    }
//}
